/*
 * generated by Xtext 2.35.0
 */
package mdu.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import library.Book;
import library.Library;
import library.LibraryPackage;
import library.Loan;
import library.Member;
import mdu.mydsl.services.MyDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LibraryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LibraryPackage.BOOK:
				sequence_Book(context, (Book) semanticObject); 
				return; 
			case LibraryPackage.LIBRARY:
				sequence_Library(context, (Library) semanticObject); 
				return; 
			case LibraryPackage.LOAN:
				sequence_Loan(context, (Loan) semanticObject); 
				return; 
			case LibraryPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Book returns Book
	 *
	 * Constraint:
	 *     (isbn=EString name=EString author=EString? available=EBoolean)
	 * </pre>
	 */
	protected void sequence_Book(ISerializationContext context, Book semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Library returns Library
	 *
	 * Constraint:
	 *     (name=EString (books+=Book books+=Book*)? (members+=Member members+=Member*)? (loans+=Loan loans+=Loan*)?)
	 * </pre>
	 */
	protected void sequence_Library(ISerializationContext context, Library semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Loan returns Loan
	 *
	 * Constraint:
	 *     (loanDate=EString dueDate=EString book=[Book|EString] borrower=[Member|EString])
	 * </pre>
	 */
	protected void sequence_Loan(ISerializationContext context, Loan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LibraryPackage.Literals.LOAN__LOAN_DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LibraryPackage.Literals.LOAN__LOAN_DATE));
			if (transientValues.isValueTransient(semanticObject, LibraryPackage.Literals.LOAN__DUE_DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LibraryPackage.Literals.LOAN__DUE_DATE));
			if (transientValues.isValueTransient(semanticObject, LibraryPackage.Literals.LOAN__BOOK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LibraryPackage.Literals.LOAN__BOOK));
			if (transientValues.isValueTransient(semanticObject, LibraryPackage.Literals.LOAN__BORROWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LibraryPackage.Literals.LOAN__BORROWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoanAccess().getLoanDateEStringParserRuleCall_3_0(), semanticObject.getLoanDate());
		feeder.accept(grammarAccess.getLoanAccess().getDueDateEStringParserRuleCall_5_0(), semanticObject.getDueDate());
		feeder.accept(grammarAccess.getLoanAccess().getBookBookEStringParserRuleCall_7_0_1(), semanticObject.eGet(LibraryPackage.Literals.LOAN__BOOK, false));
		feeder.accept(grammarAccess.getLoanAccess().getBorrowerMemberEStringParserRuleCall_9_0_1(), semanticObject.eGet(LibraryPackage.Literals.LOAN__BORROWER, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     (name=EString memberId=EString (loans+=[Loan|EString] loans+=[Loan|EString]*)?)
	 * </pre>
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
